#!/bin/sh

#
# IMAGEROOT=`pwd`/image-win64 CHOST=x86_64-w64-mingw32 CBUILD=x86_64-linux-gnu ./build
#

die() {
	echo "FATAL: $1" >&2
	exit 1
}

get_full_path() {
	( cd "$1" 2> /dev/null && pwd )
}

empty_ifelse() {
	[ -z "$1" ] && echo "$2" || echo "$3"
}

contains() {
    [ "${1#*$2}" != "$1" ] && echo "$3" || echo "$4"
}

geturl() {
	if [ -n "${WGET_MODE}" ]; then
		"${WGET}" ${WGET_OPTS} --directory-prefix="${SOURCESROOT}" "${url}"
	else
		(
			cd "${SOURCESROOT}" && \
				"${CURL}" ${CURL_OPTS} "${url}"
		)
	fi
}

download1() {
	local url="$1"
	local prefix="$(basename "${url}" | sed 's/-[0-9].*//g')"

	if ! [ -n "$(ls "${SOURCESROOT}/${prefix}-"[0-9]* 2> /dev/null)" ]; then
		geturl ${url} || die "Cannot download ${url}"
	fi
}

download() {
	for url in \
		"${OPENSSL_URL}" \
		"${LIBGPG_ERROR_URL}" \
		"${LIBASSUAN_URL}" \
		"${PINENTRY_URL}" \
		"${MYCMS_URL}" \
		; \
		do
		download1 "${url}"
	done

	if [ "$(ls "${SOURCESROOT}" | wc -l | sed 's/[ \t]//g')" != 5 ]; then
		die "sources is unclean."
	fi
}

create_layout() {
	[ -e "${IMAGEROOT}" ] && rm -fr "${IMAGEROOT}"
	[ -e "${BUILDROOT}" ] && rm -fr "${BUILDROOT}"
	[ -e "${BUILDROOT}" ] && rm -fr "${TARGETROOT}"

	mkdir -p "${SOURCESROOT}" || die "Cannot create '${SOURCESROOT}'"
	mkdir -p "${IMAGEROOT}" || die "Cannot create '${IMAGEROOT}'"
	mkdir -p "${BUILDROOT}" || die "Cannot create '${BUILDROOT}'"
	mkdir -p "${TARGETROOT}" || die "Cannot create '${TARGETROOT}'"

	BUILDROOT="$(get_full_path "${BUILDROOT}")"
	SOURCESROOT="$(get_full_path "${SOURCESROOT}")"
	IMAGEROOT="$(get_full_path "${IMAGEROOT}")"
	TARGETROOT="$(get_full_path "${TARGETROOT}")"
}

extract() {
	local f

	for f in "${SOURCESROOT}"/*; do
		local extract=""
		echo "Extract '$f'"
		case "${f}" in
			*.gz)
				extract="gunzip -c"
			;;
			*.bz2)
				extract="bunzip2 -c"
			;;
			*.lzma)
				extract="unlzma"
			;;
			*.zip)
				extract="unzip"
			;;
			*)
				extract="cat"
			;;
		esac
		if [ "${extract}" = "unzip" ]; then
			(cd "${BUILDROOT}" && unzip "${f}") || die "Extract '${f}'"
		else
			${extract} < "${f}" | ( cd "${BUILDROOT}" && tar -xf - ) || die "Extract '${f}'"
		fi
	done

	for f in "${PATCHDIR}"/*.patch "${PATCHDIR}"/*.sh; do
		product="$(echo "${f}" | sed -e 's#.*/##g' -e 's/-[0-9].*//g')"
		dir="$(echo "${BUILDROOT}/${product}"-[0-9]*)"
		if [ -d "${dir}" ]; then
			if echo "${f}" | grep '.patch$' > /dev/null; then
				echo "Patch: '$f'"
				patch -d "${dir}" -p1 < "${f}" || die "Patch '${f}'"
			else
				echo "Running: '$f'"
				( cd "${dir}"; "${f}" ) || die "Patch '${f}'"
			fi
		fi
	done
}

build_dep() {
	echo "Build openssl"
	cd "${BUILDROOT}/openssl"* || die "cd openssl"

	./Configure --prefix="${TARGETROOT}" --cross-compile-prefix=${CHOST:+${CHOST}-} \
		$(empty_ifelse "${DO_STATIC}" shared no-dso) \
		$(CHOST="${VIRTUAL_CHOST}" "${SCRIPTROOT}/gentoo.config-0.9.8") \
		${CFLAGS} ${LDFLAGS} \
		no-capieng \
		--openssldir="${TARGETROOT}/etc/ssl" \
		${EXTRA_OPENSSL_CONFIG} \
		|| die "Configure openssl"
	${MAKE} ${MAKEOPTS}
	${MAKE} ${MAKEOPTS} install \
		|| die "make openssl"

	echo "Build libgpg-error"
	cd "${BUILDROOT}/libgpg-error"* || die "cd libgpg-error"
	./configure ${CONFIGOPTS} ${EXTRA_MYCMS_CONFIG} \
		--disable-doc \
		--disable-nls \
		|| die "configure libgpg-error"
	${MAKE} ${MAKEOPTS} ${MAKE_AUTOCONF_INSTALL_TARGET} || die "make mycms"

	echo "Build libassuan"
	cd "${BUILDROOT}/libassuan"* || die "cd libassuan"
	./configure ${CONFIGOPTS} ${EXTRA_MYCMS_CONFIG} \
		--disable-doc \
		--disable-nls \
		--with-libgpg-error-prefix="${TARGETROOT}" \
		|| die "configure libgpg-error"
	${MAKE} ${MAKEOPTS} ${MAKE_AUTOCONF_INSTALL_TARGET} || die "make mycms"

	echo "Build pinentry"
	cd "${BUILDROOT}/pinentry"* || die "cd pinentry"
	./configure ${CONFIGOPTS} ${EXTRA_MYCMS_CONFIG} \
		--disable-doc \
		--disable-nls \
		--with-libgpg-error-prefix="${TARGETROOT}" \
		--with-libassuan-prefix="${TARGETROOT}" \
		|| die "configure libgpg-error"
	${MAKE} ${MAKEOPTS} ${MAKE_AUTOCONF_INSTALL_TARGET} || die "make mycms"

	cd "${SCRIPTROOT}"
}

build_mycms() {
	echo "Build mycms"
	cd "${BUILDROOT}/mycms"* || die "cd mycms"
	CFLAGS="${CFLAGS} ${OPT_MYCMS_CFLAGS}"
	PKG_CONFIG_PATH="${TARGETROOT}/lib/pkgconfig" ./configure ${CONFIGOPTS} ${EXTRA_MYCMS_CONFIG} \
		--enable-certificate-driver-file \
		--enable-certificate-driver-pkcs11 \
		--enable-cms-decrypt \
		--enable-cms-encrypt \
		--enable-cms-sign \
		--enable-cms-verify \
		--enable-io-driver-file \
		--enable-openssl-err-strings \
		--enable-pinentry \
		--enable-tool \
		|| die "Configure mycms"
	${MAKE} ${MAKEOPTS} ${MAKE_AUTOCONF_INSTALL_TARGET} || die "make mycms"

	cd "${SCRIPTROOT}"
}


clean_empty_dirs() {
	echo "Cleaning empty directories"
	find "${IMAGEROOT}" -type d | sort -r | xargs rmdir 2> /dev/null || true
}

pack() {
	cp "${TARGETROOT}/bin"/* "${IMAGEROOT}" || die "cp.image"
}

main() {
	export CFLAGS="${TARGET_CFLAGS} ${EXTRA_TARGET_CFLAGS}"
	export LDFLAGS="${TARGET_LDFLAGS} ${EXTRA_TARGET_LDFLAGS}"
	create_layout
	download
	extract
	build_dep
	if [ -z "${DO_ONLY_DEPS}" ]; then
		build_mycms
		pack
	fi
}

SCRIPTROOT="$(get_full_path "$(dirname "$0")")"

#CHOST
VIRTUAL_CHOST="${CHOST}"
#CTARGET
TARGET_CFLAGS=""
TARGET_LDFLAGS=""
CBUILD="${CBUILD:-${CHOST}}"
TARGETROOT="${TARGETROOT:-${SCRIPTROOT}/target}"
IMAGEROOT="${IMAGEROOT:-${SCRIPTROOT}/image}"
BUILDROOT="${BUILDROOT:-${SCRIPTROOT}/tmp}"
SOURCESROOT="${SOURCESROOT:-${SCRIPTROOT}/sources}"
PATCHDIR="${SCRIPTROOT}/patches"

. "${SCRIPTROOT}/build.vars" || die "Cannot source build.vars"

echo "${CHOST:-$(gcc -dumpmachine)}" | grep mingw > /dev/null && BUILD_FOR_WINDOWS=1
which "${WGET}" > /dev/null 2>&1 && WGET_MODE=1

CONFIGOPTS=" \
	--prefix=${TARGETROOT} \
	--libdir=${TARGETROOT}/lib \
	--host=${CHOST} \
	--target=${CTARGET} \
	--build=${CBUILD} \
	--program-prefix='' \
"

if [ -z "${DO_NO_STRIP}" ]; then
	MAKE_AUTOCONF_INSTALL_TARGET="install-strip"
else
	MAKE_AUTOCONF_INSTALL_TARGET="install"
fi

main

exit 0

